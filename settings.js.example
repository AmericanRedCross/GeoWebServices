//Settings.js is not part of the repository.  However, it should be deployed with the application and contain deployment-specific settings.
//there is a settings.js.example file that should match the structure and properties of this file that IS checked in to the repo.
var settings = {}

settings.pg = {};
settings.geonames = {};
settings.loggly = {};
settings.application = {};
settings.ga = {};

//application port settings
settings.application.port = 80;

//Settings for postgres DB
settings.pg.username = 'username';
settings.pg.password = 'password';
settings.pg.server = '127.0.0.1';
settings.pg.port = '5432';
settings.pg.database = 'test';

//settings for geonames API
settings.geonames.username = 'username';

//settings for loggly - cloud based logging service
settings.loggly.subdomain = 'mysubdomain';
settings.loggly.username = 'username';
settings.loggly.password = 'password';
settings.loggly.logglyKey = "abcdefg-hijklmno-pqrstu-vwxyz";

//settings for Google Analytics
settings.ga.key = "UA-000000000-1";

//settings for http proxy - which domains to allow
settings.proxyOptions = {
    allowedDomains: [
        'foo.com ',
		'bar.com'
    ]
};

//The lowest administrative level for each datasource
settings.dsLevels = {};
settings.dsLevels["gadm"] = 5;
settings.dsLevels["gaul"] = 2;
settings.dsLevels["naturalearth"] = 1;
settings.dsLevels["local"] = 2;

//Columns by level and datasource
settings.dsColumns = {};

//Used to define how to query DB for admin stack
//Columns aliased to be consistent between data sources.
//GADM
settings.dsColumns["gadm0"] = { geometry: "ST_AsGeoJSON(geom_simplify_high) as geom", columns: "guid as stack_guid, id_0 as adm0_code, name_0 as adm0_name, ST_AsText(ST_Centroid(geom)) as centroid, 0 as level" };
settings.dsColumns["gadm1"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, id_0 as adm0_code, name_0 as adm0_name, id_1 as adm1_code, name_1 as adm1_name, ST_AsText(ST_Centroid(geom)) as centroid, 1 as level" };
settings.dsColumns["gadm2"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, id_0 as adm0_code, name_0 as adm0_name, id_1 as adm1_code, name_1 as adm1_name, id_2 as adm2_code, name_2 as adm2_name, ST_AsText(ST_Centroid(geom)) as centroid, 2 as level" };
settings.dsColumns["gadm3"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, id_0 as adm0_code, name_0 as adm0_name, id_1 as adm1_code, name_1 as adm1_name, id_2 as adm2_code, name_2 as adm2_name, id_3 as adm3_code, name_3 as adm3_name, ST_AsText(ST_Centroid(geom)) as centroid, 3 as level" };
settings.dsColumns["gadm4"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, id_0 as adm0_code, name_0 as adm0_name, id_1 as adm1_code, name_1 as adm1_name, id_2 as adm2_code, name_2 as adm2_name, id_3 as adm3_code, name_3 as adm3_name, id_4 as adm4_code, name_4 as adm4_name, ST_AsText(ST_Centroid(geom)) as centroid, 4 as level" };
settings.dsColumns["gadm5"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, id_0 as adm0_code, name_0 as adm0_name, id_1 as adm1_code, name_1 as adm1_name, id_2 as adm2_code, name_2 as adm2_name, id_3 as adm3_code, name_3 as adm3_name, id_4 as adm4_code, name_4 as adm4_name, id_5 as adm5_code, name_5 as adm5_name, ST_AsText(ST_Centroid(geom)) as centroid, 5 as level" };

//GAUL
settings.dsColumns["gaul0"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, adm0_code, adm0_name, ST_AsText(ST_Centroid(geom)) as centroid, 0 as level" };
settings.dsColumns["gaul1"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, adm0_code, adm0_name, adm1_code, adm1_name, ST_AsText(ST_Centroid(geom)) as centroid, 1 as level" };
settings.dsColumns["gaul2"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, adm0_code, adm0_name, adm1_code, adm1_name, adm2_code, adm2_name, ST_AsText(ST_Centroid(geom)) as centroid, 2 as level" };

//NaturalEarth
settings.dsColumns["naturalearth0"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, adm0_a3 as adm0_code, name as adm0_name, ST_AsText(ST_Centroid(geom)) as centroid, 0 as level" };
settings.dsColumns["naturalearth1"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, adm0_a3 as adm0_code, admin as adm0_name, name as adm1_code, name as adm1_name, ST_AsText(ST_Centroid(geom)) as centroid, 1 as level" }; //no adm1 code

//TODO - support local datasources
settings.dsColumns["local0"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, adm0_code, adm0_name, ST_AsText(ST_Centroid(geom)) as centroid, 0 as level" };
settings.dsColumns["local1"] = { geometry: "ST_AsGeoJSON(geom) as geom,", columns: "guid as stack_guid, adm0_code, adm0_name, adm1_code, adm1_name, ST_AsText(ST_Centroid(geom)) as centroid, 1 as level" };


module.exports = settings;